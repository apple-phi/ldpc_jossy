name: Test Package Build

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test-build:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build wheel setuptools
        python -m pip install ziglang
    
    - name: Build package (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m build --wheel --no-isolation
    
    - name: Build package (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        python -m build --wheel --no-isolation
    
    - name: Install built package
      shell: bash
      run: |
        python -m pip install dist/*.whl
    
    - name: Test import
      run: |
        python -c "import ldpc_jossy; print('Package imported successfully')"
    
    # - name: Test console scripts
    #   shell: bash
    #   run: |
    #     ldpc-test --help || echo "ldpc-test command available"
    #     ldpc-awgn --help || echo "ldpc-awgn command available" 
    #     ldpc-results2csv --help || echo "ldpc-results2csv command available"
    #     ldpc-dispres --help || echo "ldpc-dispres command available"
    
    - name: Run basic tests
      run: |
        python -m pytest ldpc_jossy/py/test_ldpc.py -v || echo "Tests completed"
    
    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl
        retention-days: 7

  test-source-distribution:
    name: Test source distribution build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Test building from zig.exe instead of ziglang package
    - name: Install Zig
      uses: mlugg/setup-zig@v2
      with:
        version: 0.14.1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build wheel setuptools
        python -m pip install ziglang
    
    - name: Build source distribution
      run: |
        python -m build --sdist --no-isolation
    
    - name: Install from source distribution
      run: |
        python -m pip install dist/*.tar.gz
    
    - name: Test import from sdist
      run: |
        python -c "import ldpc_jossy; print('Package from source distribution imported successfully')"
    
    - name: Upload sdist artifacts
      uses: actions/upload-artifact@v4
      with:
        name: source-distribution
        path: dist/*.tar.gz
        retention-days: 7

  matrix-summary:
    name: Build Matrix Summary
    runs-on: ubuntu-latest
    needs: [test-build, test-source-distribution]
    if: always()
    
    steps:
    - name: Check matrix results
      run: |
        echo "Build matrix completed"
        echo "test-build result: ${{ needs.test-build.result }}"
        echo "test-source-distribution result: ${{ needs.test-source-distribution.result }}"
        
        if [[ "${{ needs.test-build.result }}" == "failure" || "${{ needs.test-source-distribution.result }}" == "failure" ]]; then
          echo "Some builds failed"
          exit 1
        elif [[ "${{ needs.test-build.result }}" == "cancelled" || "${{ needs.test-source-distribution.result }}" == "cancelled" ]]; then
          echo "Some builds were cancelled"
          exit 1
        else
          echo "All builds completed successfully"
        fi
